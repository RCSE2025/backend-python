version: '3.8'

services:
  backend-python:
    image: ${DOCKER_REGISTRY}/${DOCKER_REGISTRY_OWNER}/${DOCKER_APP_NAME}:${IMAGE_TAG}

    deploy:
      labels:
        # prometheus
        - "prometheus.enable=true"
        - "prometheus.scrape-port=80"
        - "prometheus.scrape-path=/metrics"
        - "prometheus.job=backend-python"
        # loki
        - "logging=promtail"
        - "logging_jobname=containerlogs"

        - "traefik.enable=true"
        - "traefik.http.routers.backend-python.rule=Host(`ticket-system.ryazan-market.ru`)"
        - "traefik.http.routers.backend-python.entrypoints=https,http"
        - "traefik.http.routers.backend-python.tls.certresolver=myresolver"
        - "traefik.http.services.backend-python.loadbalancer.server.port=80"
        - "traefik.http.routers.backend-python.tls=true"
        - "traefik.docker.network=traefik-swarm"
        - "traefik.docker.lbswarm=true"
        - "traefik.http.routers.backend-python.service=backend-python"


      replicas: 2
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 20s
        max_attempts: 5
        window: 120s

    networks:
      - "default"
      - "traefik"

  backend-python_database:
    deploy:
      replicas: 1
      update_config:
        parallelism: 0
        order: stop-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"

    networks:
      - "default"

networks:
  default:
    name: test-hack
    external: true
  traefik:
    name: traefik-swarm
    external: true